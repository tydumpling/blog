import{_ as i,c as s,a2 as d,G as t,B as r,o as p}from"./chunks/framework.DN5Ma_nw.js";const b=JSON.parse('{"title":"border-image 实现图片边框","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/属性详解/border-image.md","filePath":"learn/CSS/属性详解/border-image.md","lastUpdated":1733132188000}'),l={name:"CSS/属性详解/border-image.md"};function o(n,a,h,c,g,k){const e=r("Iframe");return p(),s("div",null,[a[0]||(a[0]=d(`<h1 id="border-image-实现图片边框" tabindex="-1">border-image 实现图片边框 <a class="header-anchor" href="#border-image-实现图片边框" aria-label="Permalink to &quot;border-image 实现图片边框&quot;">​</a></h1><h2 id="前值知识" tabindex="-1">前值知识 <a class="header-anchor" href="#前值知识" aria-label="Permalink to &quot;前值知识&quot;">​</a></h2><p><code>border-image</code> 是一个复合属性，具体详情可前往文档查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image" target="_blank" rel="noreferrer">border-image</a>，它拆分为以下三个属性：</p><ul><li><p><code>border-image-source</code> 图片源</p><p>如果单单设置这个属性，它只会在 <code>div</code> 的四个角添加图片效果，如下图所示：</p><p><img src="https://pic.imgdb.cn/item/670f7510d29ded1a8c04cf4d.png" alt="四个角" loading="lazy"></p></li><li><p><code>border-image-slice</code> 图片切割</p><p>这个属性用于设置图片的切割，切割的原理如下图</p><p><img src="https://pic.imgdb.cn/item/670f75a8d29ded1a8c053d3a.png" alt="切割" loading="lazy"></p><p>它如果设置一个值则表示全部这么切割，也可以像 <code>padding</code> 、<code>margin</code> 那样设置四个值。</p></li><li><p><code>border-image-repeat</code> 边框过渡</p><p>该值用于控制中间的重复方式，默认为拉伸 <code>stretch</code> ，如果盒子过长则拉伸，如果过小则压缩。效果如下：</p><p><img src="https://pic.imgdb.cn/item/670f76a1d29ded1a8c05ff40.png" alt="拉伸" loading="lazy"></p><p>一种是重复 <code>repeat</code> ，效果如下：</p><p><img src="https://pic.imgdb.cn/item/670f76f5d29ded1a8c0639c0.png" alt="重复" loading="lazy"></p><p>重复 <code>repeat</code> 的效果和环绕 <code>round</code> 的效果咋一看很相似，但是 <code>repeat</code> 设置的边框他是以中心点为原点，如果有超出的部分，两侧与角的交界处会对不齐。因此上方的效果图可以看出四个角附近有一点不连贯的感觉。</p></li></ul><h2 id="效果实现" tabindex="-1">效果实现 <a class="header-anchor" href="#效果实现" aria-label="Permalink to &quot;效果实现&quot;">​</a></h2><p>首先设置边框 <code>border</code> ，然后设置边框图片 <code>border-image</code> ，接收三个参数，图片的 SVG 路径，图片剪切距离，图片的裁剪效果。</p><p>代码如下所示：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soild </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./xxx.svg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="总体效果" tabindex="-1">总体效果 <a class="header-anchor" href="#总体效果" aria-label="Permalink to &quot;总体效果&quot;">​</a></h2>`,9)),t(e,{url:"https://duyidao.github.io/blogweb/#/detail/css/imageBorder"})])}const E=i(l,[["render",o]]);export{b as __pageData,E as default};

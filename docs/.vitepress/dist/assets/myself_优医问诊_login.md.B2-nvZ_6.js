import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.DN5Ma_nw.js";const r=JSON.parse('{"title":"登录模块","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"登","7":"录","8":"模","9":"块"},"headers":[],"relativePath":"myself/优医问诊/login.md","filePath":"project/myself/优医问诊/login.md","lastUpdated":1733132188000}'),p={name:"myself/优医问诊/login.md"};function e(t,s,h,k,d,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="登录模块" tabindex="-1">登录模块 <a class="header-anchor" href="#登录模块" aria-label="Permalink to &quot;登录模块&quot;">​</a></h1><h2 id="路由回退" tabindex="-1">路由回退 <a class="header-anchor" href="#路由回退" aria-label="Permalink to &quot;路由回退&quot;">​</a></h2><p>登录页面顶部导航了允许点击左侧的箭头返回上一页，此时需要判断当前路由栈是否有历史路由。如果有，返回上一个路由即可；如果没有，则直接返回到首页。</p><p>代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断历史记录中是否有回退</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (history.state?.back) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="组件类型" tabindex="-1">组件类型 <a class="header-anchor" href="#组件类型" aria-label="Permalink to &quot;组件类型&quot;">​</a></h2><p>想要实现组件也有 typescript 类型，在使用时能够给予事件、属性提示，可以给组件添加类型。</p><p>添加类型方法分为如下几步：</p><ol><li>写一个组件类型声明文件（以 <code>.d.ts</code> 为后缀），<code>declare module &#39;vue&#39;</code> 声明一个 vue 类型模块</li><li>然后 <code>interface GlobalComponents</code> 书写全局组件的类型</li><li>key组件名称支持大驼峰，value是组件类型,通过 typeof 组件实例得到</li></ol><p>代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyNavBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/components/MyNavBar.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GlobalComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    MyNavBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyNavBar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>总结</p><p>怎么给全局的组件提供类型？</p><ul><li>写一个类型声明文件，<code>declare module &#39;vue&#39;</code> 声明一个 vue 类型模块</li><li>然后 <code>interface GlobalComponents</code> 书写全局组件的类型</li><li>key组件名称支持大驼峰，value是组件类型,通过 typeof 组件实例得到</li></ul></blockquote><h2 id="svg项目打包" tabindex="-1">SVG项目打包 <a class="header-anchor" href="#svg项目打包" aria-label="Permalink to &quot;SVG项目打包&quot;">​</a></h2><p>将 SVG 图标文件自动转换为 Vue 组件，并自动导入到项目中，能够极大提高开发效率。实现该功能需要分为两步：</p><ol><li><p>使用 <code>vite-plugin-svg-icons</code> 插件</p><p>使用 <code>vite-plugin-svg-icons</code> 可以免去手动导入每个 SVG 图标的麻烦，同时还可以享受到 Vue 组件的好处，例如轻松地在模板中使用、添加 props 等等。</p><p>该插件的主要功能包括：</p><ul><li>自动读取指定目录下的 SVG 图标文件，将其转换为 Vue 组件。</li><li>自动生成一个包含所有 SVG 图标组件的 Vue 全局组件。</li><li>在编译时自动导入 SVG 图标组件，无需手动导入。</li></ul><p>使用 <code>vite-plugin-svg-icons</code> 的方法非常简单，只需要安装插件并在 Vite 配置文件 <code>vite.config.js</code> 中进行配置即可。例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createSvgIconsPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-svg-icons&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    createSvgIconsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      iconDirs: [</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 指定 SVG 图标所在的目录 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      symbolId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon-[dir]-[name]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>上述代码中，我们通过 <code>iconDirs</code> 参数指定了 SVG 图标所在的目录，<code>symbolId</code> 则指定了生成的图标 ID 的格式。</p></li><li><p>获取图片路径</p><p>使用 <code>path.resolve</code> 方法将当前工作目录和相对路径拼接成绝对路径。</p><p>更具体地说，代码中的 <code>process.cwd()</code> 返回的是当前 Node.js 进程的工作目录，而 <code>&#39;src/icons&#39;</code> 是相对于工作目录的相对路径。<code>path.resolve</code> 方法会将这两者拼接成绝对路径，例如：<code>/Users/WH/Desktop/hei/vue-project/src/icons</code>。</p><p>这个路径的含义可能是指项目中存放 SVG 图标的目录，因为 <code>vite-plugin-svg-icons</code> 插件需要知道图标所在的目录才能自动导入和转换它们。</p><p>其中在大多数情况下，这个工作目录指的是运行 Vue 项目的根目录。在终端中使用 <code>npm run</code> 命令或者其他类似的命令来启动 Vue 项目时，Node.js 进程会以项目根目录作为当前的工作目录。这意味着，对于一个 Vue 项目而言，<code>process.cwd()</code> 返回的路径就是 Vue 项目的根目录。</p><p>例如，如果你的 Vue 项目的根目录是 <code>/Users/Desktop/vue-project</code>，那么在项目的任何地方调用 <code>process.cwd()</code> 都会返回该路径。</p><p>在上述代码中，<code>path.resolve(process.cwd(), &#39;src/icons&#39;)</code> 的含义就是基于当前工作目录解析出 <code>src/icons</code> 相对路径的绝对路径。这样做可以确保正确地定位到 Vue 项目中存放 SVG 图标的目录。</p><p>最终代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createSvgIconsPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-svg-icons&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;path&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    createSvgIconsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      iconDirs: [path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/icons&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li><p>在入口文件 <code>main.js</code> 中导入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;virtual:svg-icons-register&#39;</span></span></code></pre></div></li><li><p>使用svg精灵地图，使用方式为 <code>svg-文件夹名称-图标名称</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">svg</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> aria-hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- #icon-文件夹名称-图片名称 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#icon-login-eye-off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意的是文件夹名称是在第二步设置的文件夹，即示例中 <code>src/icons</code> 。</p></li></ol><blockquote><p>总结</p><ul><li><p>icons文件打包的产物？</p><p>会生成一个 svg 结构（js创建的）包含所有图标，理解为 <code>精灵图</code></p></li><li><p>怎么使用svg图标？</p><p>通过 svg 标签 <code>#icon-文件夹名称-图片名称</code> 指定图片，理解 <code>精灵图定位坐标</code></p></li></ul></blockquote>`,16)]))}const E=i(p,[["render",e]]);export{r as __pageData,E as default};

import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.DN5Ma_nw.js";const c=JSON.parse('{"title":"拓展学习","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"拓","7":"展","8":"学","9":"习"},"headers":[],"relativePath":"vitePress/Know.md","filePath":"vitePress/Know.md","lastUpdated":1733132188000}'),t={name:"vitePress/Know.md"};function p(l,s,h,o,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="拓展学习" tabindex="-1">拓展学习 <a class="header-anchor" href="#拓展学习" aria-label="Permalink to &quot;拓展学习&quot;">​</a></h1><p>部署成功并不是终点， <code>vitepress</code> 的学习之旅还在继续。此模块收集一些知识点与功能的使用，还在不断完善中~</p><blockquote><p>前路渐行渐远，退路遥遥无期</p></blockquote><h2 id="路由跳转" tabindex="-1">路由跳转 <a class="header-anchor" href="#路由跳转" aria-label="Permalink to &quot;路由跳转&quot;">​</a></h2><p>路由跳转有两种模式：</p><ol><li><p>首页配置、导航栏侧边栏配置：<code>/目录/</code> ，如 <code>/learn/</code> 匹配的是 <code>learn</code> 文件夹下的 <code>index.md</code> 文件。</p></li><li><p><code>markdown</code> 文件配置： <code>[路由名称](/目录/)</code> ，如 <code>[我是learn模块的index.md](/learn/)</code> 。</p></li></ol><h2 id="组件使用" tabindex="-1">组件使用 <a class="header-anchor" href="#组件使用" aria-label="Permalink to &quot;组件使用&quot;">​</a></h2><p>可以使用 <code>Vue2</code> 的组件。</p><ul><li><p>在 <code>.vitepress/theme/index.js</code> 中， 因为enhanceApp 函数接受 Vueapp对象，所以可以像普通 Vue 插件那样注册组件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress/theme&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../components/MyComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DefaultTheme,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      enhanceApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyComponent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div></li><li><p>在全局组件中使用该组件</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">  # Vue.js设计与实现</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div></li></ul><blockquote><p>注意</p><p>确保自定义组件的名称包含连字符或是 PascalCase 格式。否者，它会被当成内联元素并包裹在 <code>&lt;p&gt;</code> 标签内，这将会导致 HTML 渲染紊乱， <code>&lt;p&gt;</code> 标签中不允许放置任何块级元素。</p></blockquote>`,10)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};

import{_ as i,c as a,a2 as h,o as t}from"./chunks/framework.DN5Ma_nw.js";const c=JSON.parse('{"title":"关于 forEach 使用 break 跳出循环","description":"","frontmatter":{},"headers":[],"relativePath":"面试鸭/面试典/js/关于forEach使用break跳出循环.md","filePath":"面试鸭/面试典/js/关于forEach使用break跳出循环.md","lastUpdated":1733132188000}'),n={name:"面试鸭/面试典/js/关于forEach使用break跳出循环.md"};function e(l,s,k,p,r,E){return t(),a("div",null,s[0]||(s[0]=[h(`<h1 id="关于-foreach-使用-break-跳出循环" tabindex="-1">关于 forEach 使用 break 跳出循环 <a class="header-anchor" href="#关于-foreach-使用-break-跳出循环" aria-label="Permalink to &quot;关于 forEach 使用 break 跳出循环&quot;">​</a></h1><h2 id="错误抛出" tabindex="-1">错误抛出 <a class="header-anchor" href="#错误抛出" aria-label="Permalink to &quot;错误抛出&quot;">​</a></h2><p>如果采用错误抛出的方法来结束循序，代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Error&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;后续执行的代码&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>执行后我们发现，虽然循环停止了，但是后续的代码也不再执行了。这显然不是我们想要的效果，需要做点改进。</p><h2 id="try-catch" tabindex="-1">try...catch <a class="header-anchor" href="#try-catch" aria-label="Permalink to &quot;try...catch&quot;">​</a></h2><p>在之前，我们有用过通过 <code>try...catch...</code> 捕获抛出的异常错误，可以用在这里，到捕获到 <code>forEach</code> 抛出的错误后，<code>catch</code> 内执行后续的代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Error&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;后续执行的代码&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在运行代码，能够正常执行，且效果是我们想要的效果。</p><h2 id="题外话" tabindex="-1">题外话 <a class="header-anchor" href="#题外话" aria-label="Permalink to &quot;题外话&quot;">​</a></h2><p>用异常控制语句来达到流程控制语句的效果，这是一种反模式，不要在工作中使用。代码要么改为for需要，要么根据实际情况，先用 <code>filter</code> 过滤一遍再处理。</p>`,11)]))}const o=i(n,[["render",e]]);export{c as __pageData,o as default};

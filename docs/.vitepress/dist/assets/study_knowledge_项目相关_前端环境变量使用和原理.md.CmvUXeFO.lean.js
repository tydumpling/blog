import{_ as e,c as i,a2 as a,o as t}from"./chunks/framework.DN5Ma_nw.js";const r=JSON.parse('{"title":"前端环境变量使用和原理","description":"","frontmatter":{},"headers":[],"relativePath":"study/knowledge/项目相关/前端环境变量使用和原理.md","filePath":"learn/study/knowledge/项目相关/前端环境变量使用和原理.md","lastUpdated":1733132188000}'),n={name:"study/knowledge/项目相关/前端环境变量使用和原理.md"};function l(p,s,o,d,h,c){return t(),i("div",null,s[0]||(s[0]=[a(`<h1 id="前端环境变量使用和原理" tabindex="-1">前端环境变量使用和原理 <a class="header-anchor" href="#前端环境变量使用和原理" aria-label="Permalink to &quot;前端环境变量使用和原理&quot;">​</a></h1><h2 id="核心内容" tabindex="-1">核心内容 <a class="header-anchor" href="#核心内容" aria-label="Permalink to &quot;核心内容&quot;">​</a></h2><ol><li>以 <code>vue</code> 为例，一般项目如何定义环境和环境变量</li><li>环境变量本质</li></ol><h2 id="环境变量用途" tabindex="-1">环境变量用途 <a class="header-anchor" href="#环境变量用途" aria-label="Permalink to &quot;环境变量用途&quot;">​</a></h2><p>首先先明确环境变量的用途。环境主要分为开发环境、生产环境、测试环境、预发环境等等，不同的环境需要做不同的处理。如：接口服务器地址等。</p><p>手动切换自然可以，但是容易忘记切换导致生产事故的发生，因此使用环境变量能更好的避免生产事故的发生。</p><h2 id="环境变量使用" tabindex="-1">环境变量使用 <a class="header-anchor" href="#环境变量使用" aria-label="Permalink to &quot;环境变量使用&quot;">​</a></h2><p>使用环境变量，需要先定义好 <code>.env.环境名称</code> 文件去定义，运行命令时指定环境。每个脚手架创建的项目均有差异。</p><ul><li><p>Vite + Vue3 项目</p><p>存：<code>VITE_变量名 = xxx</code></p><p>取：<code>import.meta.env.VITE_变量名</code></p></li><li><p>vue-cli 项目（Webpack + vue2）</p><p>存：<code>VUE_APP_变量名 = xxx</code></p><p>取：<code>process.env.VUE_APP_变量名</code></p></li><li><p>纯粹 webpack 打包</p><p>存：通过 <code>definePlugins</code> 自己定义到全局环境</p></li></ul><p>声明环境变量时，需要注意以下几点：</p><ol><li><code>.env</code> 文件是保底文件，所有环境都生效；<code>.env.development</code> 文件是开发环境的文件；<code>.env.production</code> 是生产环境的文件；<code>.env.test</code> 是测试环境的文件</li><li>在 <code>.env</code> 文件中声明环境变量时，无论是数值型还是字符串型，均不需要添加引号</li></ol><p>在 <code>package.json</code> 文件通过在命令后面添加 <code>--mode=</code> 可以覆盖替换模式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发模式</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite --mode=test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试模式</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境打包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果是 <code>webpack</code> 打包它本身是无法读取环境变量的，需要下载 <code>cross-env</code> 第三方库去指定。如果想获取到 <code>.env</code> 文件内的内容，需要引入 <code>dotenv</code> 。</p>`,14)]))}const E=e(n,[["render",l]]);export{r as __pageData,E as default};

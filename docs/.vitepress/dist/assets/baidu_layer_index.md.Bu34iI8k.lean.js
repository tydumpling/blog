import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.DN5Ma_nw.js";const g=JSON.parse('{"title":"图层","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"图","7":"层"},"headers":[],"relativePath":"baidu/layer/index.md","filePath":"project/baidu/layer/index.md","lastUpdated":1733132188000}'),t={name:"baidu/layer/index.md"};function p(h,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="图层" tabindex="-1">图层 <a class="header-anchor" href="#图层" aria-label="Permalink to &quot;图层&quot;">​</a></h1><h2 id="概括" tabindex="-1">概括 <a class="header-anchor" href="#概括" aria-label="Permalink to &quot;概括&quot;">​</a></h2><p>该项目涉及到了地图渲染、地图扎点渲染、Echart 图数据展示、视频流视频播放等。用到的技术项包括图表 <code>Echart</code> 、百度地图 <code>MapVThree</code> 、渐进式框架<code>Vue2.7</code> 、第三方库 <code>Loadsh</code> 与 <code>Truf</code> 等。</p><p>在项目制作中，我负责了结构物健康监测图层、病害综合管理图层、轴载数据分析图层等图层的制作，负责了公共组件视频流组件的二次封装修改开发和头部组件的封装。还涉及到项目 Poc 迁移。</p><p>该项目从以下几方面进行梳理和总结：</p><ul><li><a href="/blog/project/baidu/layer/样式.html">样式</a></li><li><a href="/blog/project/baidu/layer/规范.html">规范</a></li><li><a href="/blog/project/baidu/layer/封装.html">封装</a></li><li><a href="/blog/project/baidu/layer/MapVThree.html">MapVThree</a></li><li><a href="/blog/project/baidu/layer/优化.html">优化</a></li><li><a href="/blog/project/baidu/layer/功能.html">功能</a></li></ul><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>项目结构主要如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">examples </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 图层的根组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App.vue </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 整个图层的根组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">views </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每个图层的根组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publib </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存放公共资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assets</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">images </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 图片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">css </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modules </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模型数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assets </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 图片资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conpoments </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件（公共部分与各自图层）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多组件使用的方法与变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 公共方法封装</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包设置与简写设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.development </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发环境的配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.test </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试环境打包的配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主页面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vite.config.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件夹路径简写和跨域代理</span></span></code></pre></div><p>本项目是一个项目包含多个图层，每个图层使用到的方法会有相同的地方，但也会有各自不同的方法。因此需要做封装处理，封装时也需要考虑到易用性、复用性和可拓展性。</p><h2 id="效果展示" tabindex="-1">效果展示 <a class="header-anchor" href="#效果展示" aria-label="Permalink to &quot;效果展示&quot;">​</a></h2><p>下面附上几张效果图展示，以下效果均来自沙盒 Mock 环境：</p><ul><li><p>结构物</p><p><img src="https://pic.imgdb.cn/item/6709e1b3d29ded1a8c57590c.png" alt="结构物" loading="lazy"></p></li><li><p>负荷均匀性</p><p><img src="https://pic.imgdb.cn/item/6709e25ad29ded1a8c57f2c4.png" alt="负荷均匀性" loading="lazy"></p></li><li><p>轴载</p><p><img src="https://pic.imgdb.cn/item/6709e3a8d29ded1a8c59037d.jpg" alt="轴载" loading="lazy"></p></li></ul>`,13)]))}const E=i(t,[["render",p]]);export{g as __pageData,E as default};

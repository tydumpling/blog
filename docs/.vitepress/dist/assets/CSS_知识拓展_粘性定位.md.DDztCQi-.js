import{_ as a,c as i,a2 as p,o as t}from"./chunks/framework.DN5Ma_nw.js";const c=JSON.parse('{"title":"粘性定位","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/知识拓展/粘性定位.md","filePath":"learn/CSS/知识拓展/粘性定位.md","lastUpdated":1733132188000}'),e={name:"CSS/知识拓展/粘性定位.md"};function n(l,s,h,d,o,r){return t(),i("div",null,s[0]||(s[0]=[p(`<h1 id="粘性定位" tabindex="-1">粘性定位 <a class="header-anchor" href="#粘性定位" aria-label="Permalink to &quot;粘性定位&quot;">​</a></h1><p>粘性定位是 CSS 一个好用的属性方法，当为元素设置粘性定位后，该元素即将被滑动出屏幕外时会固定在边缘，使用方法如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sticky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>那么，粘性定位的深层次逻辑是什么呢？ <code>top: 0</code> 可以不设置么？为什么设置之后就能固定到屏幕顶部了呢？</p><p>想要了解粘性定位的底层概念，需要先了解两个概念：</p><ul><li>包含块</li><li>最近可滚动元素</li></ul><p>包含块是 CSS 最重要的知识之一，它的概念很大，这里不做过多赘述，后面考虑开新坑。最近可滚动元素是以自身为起点，一直查找可滚动的父元素。</p><p>何为可滚动元素，设置了 <code>overflow: srcoll</code> 等方法都是可滚动元素。因此一直查看父标签是否是可滚动元素，如果都不是，那么最后会找到整个视口。</p><p>设置了粘性定位 <code>top: 0</code> 的元素在没接触到最近可滚动的元素（也就是视口）时是正常滚动的；但是当它接触到视口的顶部时，就会吸附到视口的顶部。</p><p>即使吸附了，其他元素当它还在原来的位置，因此不会影响其他元素的正常排列。</p><p>最后如果该元素触碰到父元素（即包含块）的边缘，继续滚动就不会再吸附，而是被带离视口区域。</p><p>往回滑动则会重新保持吸附的状态。</p><p>最后如果回滑到它原本的位置，则会恢复成原来的样子，跟随视口滑动而滑动。</p><p>最后总结一下，粘性定位的元素实际上参考了很多元素，和做了很多处理，主要参考最近可滑动的元素、包含块以及自身。</p>`,14)]))}const E=a(e,[["render",n]]);export{c as __pageData,E as default};
